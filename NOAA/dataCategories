
 var http = require("http");
 var config = require("./config");
/**
 * Data Categories represent groupings of data types.
**/
function dataCategories(dto){
  this.data = dto?dto:null;
}
/**
*When used without optional parameters, fetches list of available data categories. Use with optional parameters below to filter results
 *@Param :datasetid: Optional. Accepts a valid dataset id or a chain of dataset ids seperated by ampersands. Location categories returned will be supported by                            dataset(s) specified
  *@Param :locationid: Optional. Accepts a valid location id or a chain of location ids seperated by ampersands. Data categories returned will contain data for the                          location(s) specified
  *@Param :stationid: Optional. Accepts a valid station id or a chain of of station ids seperated by ampersands. Data categories returned will contain data for the                         station(s) specified
  *@Param: startdate: Optional. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data after the specified date. Paramater can be                       use independently of enddate
  *@Param: enddate: Optional. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data before the specified date. Paramater can be                       use independently of startdate
  *@Param: sortfield: Optional. The field to sort results by. Supports id, name, mindate, maxdate, and datacoverage fields
  *@Param: sortorder: Optional. Which order to sort by, asc or desc. Defaults to asc
  *@Param: limit: Optional. Defaults to 25, limits the number of results in the response. Maximum is 1000
  *@Param: offset: Optional. Defaults to 0, used to offset the resultlist. The example would begin with record 24
**/
dataCategories.prototype.getDataCategories = function(dto){
	var params = dto?dto:{};
	var body = "?";
      for(var key in params){
    body = body +key+"="+params[key]+"&";
  }
 
  var requestData = http.request({
    "url":config.baseUrl+"datacategories/"+body.substring(0,body.length-1),
    "headers":{"token":config.getToken()},
    "bodyString":params,
    "method":"GET"
  });
    if (requestData.status >= "200" && requestData.status < "300") {
      	if(JSON.parse(requestData.body).results){
          this.data = JSON.parse(requestData.body).results;
          return {"status":"success","data Categories":this.data};
        }
        else return {"stauts":"success","data Categories":{}};
    }
  else return requestData;
}
/**
*Used to find information about data categories with id of {id}
 *@Param :datasetid: Optional. Accepts a valid dataset id or a chain of dataset ids seperated by ampersands. Location categories returned will be supported by                            dataset(s) specified
  *@Param :locationid: Optional. Accepts a valid location id or a chain of location ids seperated by ampersands. Data categories returned will contain data for the                          location(s) specified
  *@Param :stationid: Optional. Accepts a valid station id or a chain of of station ids seperated by ampersands. Data categories returned will contain data for the                         station(s) specified
  *@Param: startdate: Optional. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data after the specified date. Paramater can be                       use independently of enddate
  *@Param: enddate: Optional. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data before the specified date. Paramater can be                       use independently of startdate
  *@Param: sortfield: Optional. The field to sort results by. Supports id, name, mindate, maxdate, and datacoverage fields
  *@Param: sortorder: Optional. Which order to sort by, asc or desc. Defaults to asc
  *@Param: limit: Optional. Defaults to 25, limits the number of results in the response. Maximum is 1000
  *@Param: offset: Optional. Defaults to 0, used to offset the resultlist. The example would begin with record 24
**/
dataCategories.prototype.getDataCategoriesFromId = function(id,dto){
  if(!id){
    return this.getDataCategories(dto);
  }
  var params = dto?dto:{};
	var body = "?";
      for(var key in params){
    body = body +key+"="+params[key]+"&";
  }
 
  var requestData = http.request({
    "url":config.baseUrl+"datacategories/"+id+"/"+body.substring(0,body.length-1),
    "headers":{"token":config.getToken()},
    "method":"GET"
  });
  
      if (requestData.status >= "200" && requestData.status < "300") {
      	if(JSON.parse(requestData.body)){
          this.data = JSON.parse(requestData.body);
           return {"status":"success","data Categories":this.data};
        }
        else return {"stauts":"success","data Categories":{}};
	}
  else return requestData;
}
