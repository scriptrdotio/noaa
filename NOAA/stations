
 var http = require("http");
 var config = require("./config");
/**
*Stations are where the data comes from (for most datasets) and can be considered the smallest granual of location data. If the desired station is known, all of its data can quickly be viewed
**/
function stations(cfg){
  this.config = cfg?cfg:config;
}
/**
  *When used without optional parameters, fetches list of available stations. Use with optional parameters below to filter results
  *@Param: datasetid: Optional. Accepts a single valid dataset id. Data returned will be from the dataset specified.
  *@Param: locationid: 	Optional. Accepts a valid location id or a chain of location ids seperated by ampersands. Stations returned will contain data for the 								location(s) specified
  *@Param: datacategoryid: 	Optional. Accepts a valid data category id or an array of data category IDs. Locations returned will be associated with the data 									category(ies) specified.
  *@Param: datatypeid:  Optional. Accepts a valid data type id or a chain of data type ids seperated by ampersands. Stations returned will contain all of the data 							type(s) specified
  *@Param: extent:	Optional. The desired geographical extent for search. Designed to take a parameter generated by Google Maps API V3 LatLngBounds.toUrlValue. 						Stations returned must be located within the extent specified.
  *@Param: startdate: Required. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data after the specified date. Paramater can be                       use independently of enddate
  *@Param: enddate: Required. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data before the specified date. Paramater can be                       use independently of startdate
  *@Param: sortfield: Optional. The field to sort results by. Supports id, name, mindate, maxdate, and datacoverage fields
  *@Param: sortorder: Optional. Which order to sort by, asc or desc. Defaults to asc
  *@Param: limit: Optional. Defaults to 25, limits the number of results in the response. Maximum is 1000
  *@Param: offset: Optional. Defaults to 0, used to offset the resultlist. The example would begin with record 24
**/
dataTypes.prototype.getStations = function(dto){
  var params = dto?dto:{};
  var body = "?";
  for(var key in params){
  		body = body +key+"="+params[key]+"&";
  }
  var requestData = http.request({
    "url":this.config.baseUrl+"stations/"+body.substring(0,body.length-1),
    "headers":{"token":this.config.getToken()},
    "bodyString":params,
    "method":"GET"
  });
    if (requestData.status >= "200" && requestData.status < "300") {
      	if(JSON.parse(requestData.body).results){
          this.data = JSON.parse(requestData.body).results;
          return {"status":"success","stations":this.data};
        }
        else return {"stauts":"success","stations":{}};
    }
  else return requestData;
}
/**
  *Used to find information about the station with id of {id}.
  *@Param: datasetid: Optional. Accepts a single valid dataset id. Data returned will be from the dataset specified.
  *@Param: locationid: 	Optional. Accepts a valid location id or a chain of location ids seperated by ampersands. Stations returned will contain data for the 								location(s) specified
  *@Param: datacategoryid: 	Optional. Accepts a valid data category id or an array of data category IDs. Locations returned will be associated with the data 									category(ies) specified.
  *@Param: datatypeid:  Optional. Accepts a valid data type id or a chain of data type ids seperated by ampersands. Stations returned will contain all of the data 							type(s) specified
  *@Param: extent:	Optional. The desired geographical extent for search. Designed to take a parameter generated by Google Maps API V3 LatLngBounds.toUrlValue. 						Stations returned must be located within the extent specified.
  *@Param: startdate: Required. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data after the specified date. Paramater can be                       use independently of enddate
  *@Param: enddate: Required. Accepts valid ISO formated date (yyyy-mm-dd). Location categories returned will have data before the specified date. Paramater can be                       use independently of startdate
  *@Param: sortfield: Optional. The field to sort results by. Supports id, name, mindate, maxdate, and datacoverage fields
  *@Param: sortorder: Optional. Which order to sort by, asc or desc. Defaults to asc
  *@Param: limit: Optional. Defaults to 25, limits the number of results in the response. Maximum is 1000
  *@Param: offset: Optional. Defaults to 0, used to offset the resultlist. The example would begin with record 24
**/
dataTypes.prototype.getStationsFromId = function(id,dto){
  if(!id){
    return this.getStations(dto);
  }
  var params = dto?dto:{};
  var body = "?";
  for(var key in params){
  		body = body +key+"="+params[key]+"&";
  }
  var requestData = http.request({
    "url":config.baseUrl+"stations/"+id+"/"+body.substring(0,body.length-1),
    "headers":{"token":config.getToken()},
    "bodyString":params,
    "method":"GET"
  });
  
      if (requestData.status >= "200" && requestData.status < "300") {
      	if(JSON.parse(requestData.body)){
          this.data = JSON.parse(requestData.body);
           return {"status":"success","stations":this.data};
        }
        else return {"stauts":"success","stations":{}};
	}
  else return requestData;
}
